
- 히스토리 
클래스명(패키지포함), 메소드명, GUID, 유입단IP, 서비스 수행시간, 인터페이스ID, 서비스ID, 화면ID
형식으로 로그남기는 요구사항 옴 
interceptor 이용해서 로그 남길거임 
preHandler -> controller -> postHandler -> mvc 
이런 순으로 로직이 탐 

HandlerMapping 
HandlerAdapter 
preHandle : 컨트롤 메서드가 호출되기 전에 실행
controller
postHandle : 컨트롤 메서드가 호출된 후, view 페이지 렌더링 되기 전에 실행
view
afterCompletion : view 페이지 렌더링된 후, 즉 모든 작업 완료 후 실행



*****
클래스명, 메소드명 : handler.toString
유입단ip	: HttpServletRequest reqeust.getRemoteAddr()
서비스수행시간 : StopWatch sw.getTotalTimeMillis()
서비스id 	: HttpServletRequest request.getRequestURI()
화면id		: ModelAndView modelAndView.getViewName 
******

PerfLogInterceptor.java

public class ActionLogInterceptor extends HandlerInterceptorAdapter {
	private static Logger log = Logger.getLogger("PERF_LOG");
	
	private StopWatch sw;

	private String jspName;
	@Override
	public boolean preHandler(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {
		sw = new StopWatch();
		sw.start();
		return true;
	}
	

	@Override
	public void postHandler(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception {
		log.debug("========: " + handler.toString();
//		MultiReadHttpServletRequest req = new MultiReadHttpServletRequest((HttpServletRequest)request);
//		new ActionLogSerivce().makeLog(req);
		
		sw.stop();
		if (modelAndView != null){
			jspName = modelAndView.getViewName() + (modelAndView.getViewName().contatins(".do")?"":".jsp");
		}else{
			jspName = "";
		}
	}

	@Override
	public void afterCompletion( ...
		String strDelemeter = ",";
		String strClassName = handler.toString().split("#")[0];
		String strMethodName = handler.toString().split("#")[1];
		String strGUID = "";
		String strIP = request.getRemoteAddr();
		String strElapsedTime = String.format("%.3fs", sw.getTottalTimeSeconds());
		String strError = (ex == null)? "success":"error";
		String strInterfaceId = "";
		String strServiceId = request.getRequestURI();
		String strScreenId = jspName;
		strMethodName = strMethodName.substring(0, strMethodName.indexOd("("));
	
		StringBuffer perflog = new StringBuffer();
		perfLog.append(strClassName).append(strDelemeter)
					.append(strMethodName).append(strDelemeter)
					.append(strGUID).append(strDelemeter)
					.append(strIP).append(strDelemeter)
					.append(strElapsedTime).append(strDelemeter)
					.append(strError).append(strDelemeter)
					.append(strInterfaceId).append(strDelemeter)
					.append(strServiceId).append(strDelemeter)
					.append(strScreenId);
			log.info(perfLog.toString());
		}

	}


Common-servlet.xml
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean id="perfLogInterceptor" class="com.sc.gf.perfLog.PerfLogInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>



log4j.xml
<appender name="PERF_LOG_APPENDER" class="org.apache.log4j.rolling.RollingFileAppender">
	<param name="append" value="true" />
	<param name="encoding" value="UTF-8" />
	<param name="file" value="/gfinance/wasApps/log/perf_log/easy_perf.log"/>
	<rollingPolicy class="org.apache.log4j.rolling.TimeBaseRollingPolicy">
		<param name="FileNamePattern" value="/gfinance/wasApps/log/perf_log/easy_perf_%d{yyyy-MM-dd}.log" />
	</rollingPolicy>
	<layout class="org.apache.log4j.PatternLayout">
		<param name="CoversionPattern" value="[%d] %m%n" />
	</layout>
</appender>

<logger name="PERF_LOG">
		<level value="INFO" />
		<appender-ref ref="PERF_LOG_APPEDNER"/>
</logger>


